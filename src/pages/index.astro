---
import Layout from "../layouts/Layout.astro";
import Parser from "rss-parser";
import { fetchSources } from "../utilities/fetchSources.js";
const parser = new Parser();
const sources = await fetchSources();

//extraact just urls from sources
const feedUrls = sources.map((source) => source.url).filter((url) => url); // removes empty, null, or undefined entries

console.log("Feed URLs:", feedUrls);

const sevenDaysAgo = new Date();
sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

const feedSources = [
  "https://www.youtube.com/feeds/videos.xml?channel_id=UCXwsBnDQtx1i2qbgcHoQWNA",
  "https://rss.app/feeds/Jys3w5A2bube437C.xml",
  "https://feeds.feedburner.com/brainpickings/rss",
  "https://rss.app/feeds/mKThkyFodt9bIacu.xml",
];

interface FeedItem {
  feed?: string;
  title?: string;
  link?: string;
  date?: Date;
}

const feedItems: FeedItem[] = [];

await Promise.allSettled(
  feedUrls.map(async (source) => {
    try {
      const feed = await parser.parseURL(source);
      feed.items.forEach((item) => {
        const date = item.pubDate ? new Date(item.pubDate) : undefined;
        if (date && date >= sevenDaysAgo) {
          feedItems.push({
            feed: feed.title,
            title: item.title,
            link: item.link,
            date,
          });
        }
      });
    } catch (error) {
      console.error(`Error fetching feed from ${source}:`, error);
    }
  })
);

const sortedFeedItems = feedItems.sort(
  (a, b) => (b.date ?? new Date()).getTime() - (a.date ?? new Date()).getTime()
);
---

<Layout title="Welcome to Astro.">
  <main>
    <p>list of sources</p>
    {
      sortedFeedItems.map((item) => (
        <ul>
          <li>
            <a href={item.link}>{item.title}</a>
            <p>{item.feed}</p>
            <p>{item.date}</p>
          </li>
        </ul>
      ))
    }
  </main>
</Layout>
